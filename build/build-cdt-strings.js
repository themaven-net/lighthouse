/**
 * @license Copyright 2022 The Lighthouse Authors. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

import fs from 'fs';

import {LH_ROOT} from '../root.js';

/**
 * @param {string} text
 * @param {string|RegExp} searchValue
 * @param {string} replaceValue
 */
function doReplacement(text, searchValue, replaceValue) {
  const newValue = text.replace(searchValue, replaceValue);
  if (newValue === text) throw new Error(`could not find: ${searchValue}`);
  return newValue;
}

/**
 * @param {string} text
 * @param {string} startPattern
 * @param {string} endPattern
 * @param {[string|RegExp, string][]} replacements
 */
function extract(text, startPattern, endPattern, replacements = []) {
  const startIndex = text.indexOf(startPattern);
  if (startIndex === -1) throw new Error(`could not find: ${startPattern}`);
  const endIndex = text.indexOf(endPattern, startIndex);
  if (endIndex === -1) throw new Error(`could not find: ${endPattern}`);

  let subText = text.substring(startIndex, endIndex + endPattern.length);
  for (const replacement of replacements) {
    subText = doReplacement(subText, replacement[0], replacement[1]);
  }
  return subText;
}

/**
 * @param {string} uiStringsDeclare
 * @param {string} extraCode
 */
function createStringsModule(uiStringsDeclare, extraCode) {
  return `
// auto-generated by build/build-cdt-strings.js
/* eslint-disable */

import * as i18n from '../lib/i18n/i18n.js';

${uiStringsDeclare}

const str_ = i18n.createIcuMessageFn(import.meta.url, UIStrings);

${extraCode}`.trimStart();
}

// core/lib/deprecations-strings.js
{
  // eslint-disable-next-line max-len
  const inFile = `${LH_ROOT}/node_modules/chrome-devtools-frontend/front_end/models/issues_manager/DeprecationIssue.ts`;
  const outFile = `${LH_ROOT}/core/lib/deprecations-strings.js`;

  const input = fs.readFileSync(inFile, 'utf-8');

  const uiStringsDeclare = extract(input, 'const UIStrings', '};', [
    // Some patterns are supported in DevTools UIStrings, but not ours.
    [/\\\\/g, ''],
    [`\\'plan-b\\'`, 'plan-b'],
  ]);
  const getDescriptionDeclare =
    extract(input, 'getDescription(): MarkdownIssueDescription', '});\n  }', [
      ['getDescription(): MarkdownIssueDescription', 'function getDescription(issueDetails)'],
      ['this.#issueDetails', 'issueDetails'],
      [`let messageFunction = (): string => '';`, `let message;`],
      [/messageFunction/g, 'message'],
      [/i18nLazyString/g, 'str_'],
      ['resolveLazyDescription', ''],
      ['links,', 'links, message,'],
      [/Protocol\.Audits\.DeprecationIssueType\.(\w+)/g, `'$1'`],
    ]);

  const extraCode = `
/**
 * @param {LH.Crdp.Audits.DeprecationIssueDetails} issueDetails
 */
${getDescriptionDeclare}

export {
  getDescription as getIssueDetailDescription,
  UIStrings,
};`;
  fs.writeFileSync(outFile, createStringsModule(uiStringsDeclare, extraCode));
}

// core/lib/bf-cache-strings.js
{
  // eslint-disable-next-line max-len
  const inFile = `${LH_ROOT}/node_modules/chrome-devtools-frontend/front_end/panels/application/components/BackForwardCacheStrings.ts`;
  const outFile = `${LH_ROOT}/core/lib/bf-cache-strings.js`;

  const input = fs.readFileSync(inFile, 'utf-8');

  const uiStringsDeclare = extract(input, 'const UIStrings', '};');
  const notRestoredReasonDescriptionDeclare =
    extract(input, 'const NotRestoredReasonDescription', '};', [
      [/i18nLazyString/g, 'str_'],
    ]);

  const extraCode = `
/** @type {Record<string, {name: LH.IcuMessage} | undefined>} */
${notRestoredReasonDescriptionDeclare}

export {
  NotRestoredReasonDescription,
  UIStrings,
};`;
  fs.writeFileSync(outFile, createStringsModule(uiStringsDeclare, extraCode));
}
